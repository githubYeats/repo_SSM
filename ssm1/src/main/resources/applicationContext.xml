<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                ">

    <!--组件扫描-->
    <context:component-scan base-package="cn.leap">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--======================配置数据源：C3P0  begin==========================-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--======================配置数据源：C3P0  end==========================-->


    <!--======================Spring集成MyBatis  begin=========================
        Spring容器接管SqlSession对象的创建权
    -->
    <!--配置sqlSession工厂
        需要两个属性：
            1）数据源   				SqlSession对象，数据源属性是必须的。没有会报错。
            		BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class
            		path resource [applicationContext.xml]: Invocation of init method failed; nested exception
            		is java.lang.IllegalArgumentException: Property 'dataSource' is required
            	因此，还需要将数据源的配置，从MyBatis核心配置文件中，移到Spring核心配置文件中来。
            	注意：之前数据源配置在MyBatis中时，用的是MyBatis内置的数据源。
            2）MyBatis核心配置文件
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载MyBatis核心配置文件-->
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
    </bean>
    <!--扫描mapper包，为Mapper接口创建代理实现类对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定包-->
        <property name="basePackage" value="cn.leap.mapper"/>
    </bean>
    <!--======================Spring集成MyBatis  end=========================-->

    <!--======================Spring事务控制：简化方式  begin=================-->
    <!--1. 配置平台事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--====2. 配置通知  事务的增强      设置事务属性信息====
        以注解代替：service层中业务方法上    以转账事务为例 transfer()
        @Transactional(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = false)
        下面这段xml配置，相当于@Transactional注解后括号中的属性信息
    -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>-->

    <!--====3. 配置事务的AOP织入====
        以注解代替：service层transfer()方法上
        @Transactional(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = false)
        下面这段xml配置，就相当于在transfer()方法加个“@Transactional”。
            其中的切点表达式，是针对cn.yeats.service.impl包中所有方法的。
            在转账案例中，此包下只写了一个transfer()方法
    -->
    <!--<aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* cn.yeats.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>-->

    <!--====事务的注解驱动====
        Spring事务控制注解配置中，替代上面第2步与第3步！        大大简化事务管理配置。
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--======================Spring事务控制：简化方式  end==========================================-->


</beans>